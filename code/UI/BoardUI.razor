@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="board">
        <div class="row">
            <div class="square" style="background-color: @GetSpaceColour(board.Board[0, 0])">@GetSpaceValue(board.Board[0, 0])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[0, 1])">@GetSpaceValue(board.Board[0, 1])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[0, 2])">@GetSpaceValue(board.Board[0, 2])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[0, 3])">@GetSpaceValue(board.Board[0, 3])</div>
        </div>
        <div class="row">
            <div class="square" style="background-color: @GetSpaceColour(@board.Board[1, 0])">@GetSpaceValue(board.Board[1, 0])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[1, 1])">@GetSpaceValue(board.Board[1, 1])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[1, 2])">@GetSpaceValue(board.Board[1, 2])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[1, 3])">@GetSpaceValue(board.Board[1, 3])</div>
        </div>
        <div class="row">
            <div class="square" style="background-color: @GetSpaceColour(board.Board[2, 0])">@GetSpaceValue(board.Board[2, 0])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[2, 1])">@GetSpaceValue(board.Board[2, 1])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[2, 2])">@GetSpaceValue(board.Board[2, 2])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[2, 3])">@GetSpaceValue(board.Board[2, 3])</div>
        </div>
        <div class="row">
            <div class="square" style="background-color: @GetSpaceColour(board.Board[3, 0])">@GetSpaceValue(board.Board[3, 0])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[3, 1])">@GetSpaceValue(board.Board[3, 1])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[3, 2])">@GetSpaceValue(board.Board[3, 2])</div>
            <div class="column"></div>
            <div class="square" style="background-color: @GetSpaceColour(board.Board[3, 3])">@GetSpaceValue(board.Board[3, 3])</div>
        </div>
    </div>
</root>

@code
{
    [Property] BoardManager board { get; set; }

    public bool Update { get; set; } = false;

    string GetSpaceValue( int spaceValue )
    {
        BuildHash();
        if (spaceValue == 0) return " ";
        else return spaceValue.ToString();
    }

    string GetSpaceColour( int spaceValue ) 
    {
        switch(spaceValue)
        {
            case 2:
                return "#ffff47";
            case 4:
                return "#ffa600";
            case 8:
                return "#4169e1";
            case 16:
                return "#9370db";
            case 32:
                return "#b22121";
            case 64:
                return "#dc143c";
            case 128:
                return "#32cd32";
            case 256:
                return "#00fa9a";
            case 512:
                return "#ee82ee";
            case 1024:
                return "#ff69b4";
            case 2048:
                return "#8b008b";
            default:
                return "#ffffff";
        }
    }
   
    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(Update);
}
